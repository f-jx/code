//引用和指针的区别：
//变量名是内存地址的一个人们可读的标签
//指针可以看作一个变量的某种属性，该属性存储着该变量所指向的内存地址，并且该属性是一种变量，可以被改变的。
//引用就是给内存地址贴上第二个标签，例如：int i = 10; int& j = i;
//灵活运用指针和引用，可以从传数组给内部函数和从函数中返回数组。

//在变量定义中，*代表其后是一个指针变量，&代表其后是一个引用
//在输出流中，（*与指针变量的组合）指向其对应地址所存储的值，（&与变量的组合）代表该变量的地址
#include <iostream>
using namespace std;
int main()
{
    int a = 10;
    int & b = a;    //b是变量a所对应地址的第二标签。
    int * p_a = &a;
    int * p_b = &b;
    int * p_p_a = p_a;  //指针变量的再次引用，用于从函数中返回数组（）
    int * p_p_b = p_b;  //相当于给指针变量所对应内存地址贴上第二个标签
    //访问指针*p_a的值所对应的内存地址中存储的数值，即a的值，也是指针*p_b的值所对应内存地址中存储的数值
    cout << a << " " << *p_a << " " << *p_b << " " << *p_p_a << " " << *p_p_b << endl;
    //输出存储在指针变量p_a中的地址数据，即a的地址
    cout << &a << " " << p_a << " " << p_b << endl;
    //输出指针变量p_a的地址，即a的指针变量的地址，和b的指针变量的地址；注意他们俩不同
    cout << &p_a << " " << &p_b << endl;
    return 0;
}